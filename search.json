[{"title":"茭白分拣相关库","date":"2024-11-11T11:10:36.324Z","url":"/2024/11/11/%E8%8C%AD%E7%99%BD%E5%88%86%E6%8B%A3%E7%9B%B8%E5%85%B3%E5%BA%93/","categories":[["undefined",""]],"content":"为了完成一个果蔬良次品分拣项目，以下是你需要学习的Python库，以及每个库的主要用途。这些库涵盖了数据处理、特征提取、模型训练、评估和可视化等方面。 1. NumPy 用途：数值计算和矩阵操作 理由：机器学习和图像处理涉及大量矩阵运算，NumPy提供高效的数组操作。 学习要点： 创建和操作数组（如np.array, np.reshape等） 数学运算（如矩阵乘法、求和、平均等） 数组索引和切片 2. OpenCV 用途：计算机视觉和图像处理 理由：用于图像的读取、显示、预处理（如颜色转换、边缘检测、滤波等）和特征提取。 学习要点： 读取和显示图像（cv2.imread, cv2.imshow） 图像转换（如颜色空间转换cv2.cvtColor） 图像预处理（如模糊、边缘检测） 形状和轮廓提取 3. Pandas 用途：数据处理和分析 理由：数据清洗和处理的利器，尤其适合处理表格数据和标注文件。 学习要点： 数据读取和写入（如pd.read_csv） 数据清洗和处理（如缺失值处理、数据分组） 合并和连接数据 4. scikit-learn 用途：传统机器学习算法和数据预处理 理由：包含各种经典机器学习模型和工具，用于模型选择、训练、验证和评估。 学习要点： 数据预处理（如标准化、数据分割） 常见分类算法（如KNN、SVM、决策树等） 模型评估（如交叉验证、混淆矩阵、准确率） 5. TensorFlow&#x2F;Keras（或PyTorch） 用途：深度学习框架 理由：适合用来构建复杂的神经网络模型，尤其在图像分类任务中，卷积神经网络（CNN）表现优异。 学习要点： 构建模型的基础（如Sequential模型、各种层的使用） 编译和训练模型（如model.fit、model.evaluate） 数据增强和预处理 保存和加载模型 6. scikit-image 用途：高级图像处理 理由：提供一些OpenCV没有的高级图像处理算法，如局部二值模式（LBP）等。 学习要点： 图像的纹理分析（如LBP） 图像分割和特征提取 7. Matplotlib和Seaborn 用途：数据可视化 理由：帮助你可视化数据分布、模型性能和结果。 学习要点： 基本图表（折线图、柱状图、散点图等） 可视化模型评估结果（如准确率、损失曲线） 热力图和相关性矩阵（Seaborn特别适合做复杂的可视化） 8. os库 用途：文件和目录操作 理由：项目往往涉及大量图像数据，os库能帮助批量处理文件。 学习要点： 文件路径处理（如os.path.join、os.listdir） 文件夹的创建和遍历 9. glob库（可选） 用途：文件批量查找 理由：可以使用通配符查找特定类型的文件，非常适合处理大量图像数据。 学习要点： 文件路径模式匹配（如获取所有.jpg文件：glob.glob(&quot;*.jpg&quot;)） 项目学习步骤建议 从简单的NumPy和Pandas入手，理解如何处理数据。 接着学习OpenCV和scikit-image的基本操作，用于图像的预处理和特征提取。 掌握scikit-learn的基本机器学习模型，完成简单的训练和测试。 学习TensorFlow&#x2F;Keras，构建一个基础的卷积神经网络（CNN）模型。 在项目的最后，用Matplotlib和Seaborn进行数据和结果的可视化。 总结通过学习这些库，逐步掌握数据预处理、特征提取、模型训练和结果可视化等能力，就可以完成一个完整的果蔬分拣项目。"},{"title":"特征提取","date":"2024-11-11T11:09:10.822Z","url":"/2024/11/11/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/","categories":[["undefined",""]],"content":" 在果蔬分拣任务中，特征提取是从图像中提取有助于区分良品和次品的信息。这些特征可以是颜色、形状、纹理等。对于有基础的Python用户，可以使用OpenCV和一些Python库来实现这些特征提取。下面我会一步步带你实现几个常用的特征提取方法。 1. 环境准备首先需要安装一些Python库： 然后，导入这些库： 2. 加载图像从图像中读取果蔬图片，并进行基本的处理： 3. 提取颜色特征颜色特征可以帮助我们判断果蔬是否成熟。一个常用方法是计算颜色直方图。 这段代码提取了颜色直方图，并对其归一化，可以用作模型的颜色特征。 4. 提取形状特征形状特征可以用于识别果蔬是否有损伤或畸形。以下是获取轮廓面积的简单方法： contour_area可以作为果蔬的形状特征。通常，畸形或破损的果蔬会有异常的面积。 5. 提取纹理特征纹理特征帮助检测果蔬表面是否有瑕疵。可以使用灰度共生矩阵（GLCM）等方法来提取，但这里我们用简单的方法：图像的局部二值模式（LBP）。 首先安装scikit-image库： 然后提取纹理特征： 此代码生成的LBP直方图可以作为纹理特征。 6. 将特征组合为输入数据可以把以上三种特征组合在一起，形成模型的输入数据。例如： 这个features向量就是你可以用来训练模型的数据。 总结 颜色特征：HSV直方图 形状特征：轮廓面积 纹理特征：LBP直方图 学习这些特征的提取方法会帮助你逐步理解如何构建适合分拣系统的模型。在练习中，试着从不同种类的图像中提取这些特征，并观察它们的数值变化，以加深理解。"},{"title":"茭白分拣的研究路线","date":"2024-11-11T11:08:24.630Z","url":"/2024/11/11/%E8%8C%AD%E7%99%BD%E5%88%86%E6%8B%A3%E7%9A%84%E7%A0%94%E7%A9%B6%E8%B7%AF%E7%BA%BF/","categories":[["undefined",""]],"content":"我理解你的需求，从零开始掌握机器学习和计算机视觉的技术并应用到实际项目中。以下是一个从基础到项目实践的完整学习路线，每一步都有明确的目标和学习内容。 阶段 1：编程和数据处理基础目标：熟悉Python编程和数据处理工具，打下坚实基础。 学习Python基础：变量、数据类型、控制语句、函数、类等。 推荐资源：Python官方教程、Codecademy等。 掌握NumPy：学会使用NumPy进行矩阵和数组操作。 内容：数组创建、索引、数学运算、广播等。 推荐资源：NumPy文档、YouTube教程。 学习Pandas：掌握数据导入、清洗、操作和导出。 内容：数据帧操作、缺失值处理、分组聚合、数据合并等。 推荐资源：Pandas官方教程。 基本数据可视化：掌握Matplotlib和Seaborn进行数据可视化。 内容：绘制柱状图、折线图、散点图、热力图。 推荐资源：Matplotlib和Seaborn官方文档。 阶段 2：机器学习基础目标：掌握机器学习的基本概念和算法，并应用于简单的分类任务。 机器学习概念：了解什么是监督学习、无监督学习、分类和回归。 推荐资源：Andrew Ng的《机器学习》课程。 熟悉scikit-learn：学习如何使用scikit-learn实现机器学习算法。 内容：数据预处理（如标准化、数据分割）、训练和测试模型。 学习算法：逻辑回归、KNN、决策树、支持向量机（SVM）等。 模型评估：掌握如何用准确率、召回率、F1分数等评估模型性能。 阶段 3：计算机视觉基础目标：掌握图像处理的基本技能，能够预处理图像和提取特征。 OpenCV入门：学习如何使用OpenCV读取、显示和保存图像。 内容：图像基本操作（如裁剪、调整大小）、颜色空间转换（RGB、HSV）、边缘检测、模糊处理。 特征提取：掌握如何提取图像中的颜色、形状和纹理特征。 内容：颜色直方图、轮廓提取、纹理分析（如局部二值模式LBP）。 使用scikit-image：了解scikit-image中的一些高级特征提取工具，如GLCM纹理分析。 阶段 4：深度学习与图像分类目标：掌握卷积神经网络（CNN）的基础知识，能够使用深度学习框架进行图像分类。 理解神经网络和深度学习：学习神经网络的基本结构和训练过程。 推荐资源：Coursera的《深度学习专项课程》。 TensorFlow&#x2F;Keras或PyTorch入门：学习如何使用深度学习框架构建和训练模型。 内容：构建一个简单的CNN模型，用于图像分类。 任务：在MNIST数据集上练习手写数字分类。 数据增强和迁移学习：掌握如何使用数据增强来丰富训练数据，了解如何用预训练模型（如ResNet、VGG）进行迁移学习。 阶段 5：项目实战：果蔬良次品分拣系统目标：将所学的知识整合在一个完整的项目中，从数据收集到模型部署，完成一个自动分拣系统。 数据采集与标注：收集大量果蔬的良品和次品图像，并进行标注。 数据预处理：使用OpenCV和scikit-image对图像进行预处理，提取特征。 包括：颜色特征（HSV直方图）、形状特征（轮廓面积）、纹理特征（LBP）。 选择模型：根据数据规模选择合适的模型。 小数据集：可以用scikit-learn的分类模型（如SVM、KNN）。 大数据集：可以使用深度学习CNN模型（如TensorFlow&#x2F;Keras构建的卷积神经网络）。 模型训练与评估：在训练集上训练模型，在测试集上评估其性能。 指标：准确率、召回率、F1分数等。 模型优化：调整参数或选择不同的模型架构，提高模型的准确性。 部署与实时检测：将模型集成到摄像头系统中进行实时分拣。 可用工具：OpenCV实时读取摄像头图像，结合模型进行分类，控制机械装置完成分拣。 阶段 6：复盘和提升在项目完成后，可以思考如何进一步优化，比如尝试更先进的深度学习架构，或引入多线程提高实时性能。 推荐学习顺序和时间分配 基础学习（阶段1和阶段2）：2-3个月 图像处理与机器学习（阶段3和阶段4）：2-3个月 项目实战（阶段5）：1-2个月 这条路线会帮助你从零到独立完成项目，建议按顺序逐步深入，随时动手实践并记录学习心得。随时可以在实践中调整策略，逐步提升自己。"},{"title":"opencv茭白分拣学习路线","date":"2024-10-16T08:37:49.380Z","url":"/2024/10/16/opencv%E8%8C%AD%E7%99%BD%E5%88%86%E6%8B%A3%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/","categories":[["undefined",""]],"content":"熟练掌握python语言学习git学习opencv尝试测试使用识别库"},{"title":"律","date":"2024-09-11T08:47:01.331Z","url":"/2024/09/11/%E5%BE%8B/","categories":[["undefined",""]],"content":"物品放置归类原则 宿舍桌子 命名1、2、3、4、5、6 1 书架 2 气氛类杂物 3 草稿纸、杂项纸张 4 盒子（o3c、不常用数据线、防滑垫、不常用电子类物品） 4 空 纸巾 消毒液 5 板子 电子配件 6 雨伞 食用品 饮用水 桌面 正如你所见 抽屉垃圾耳机终端性电子设备医疗杂物文具淘汰物品移动粗存储设备 衣柜上衣架衣物皮箱 衣柜下不常用容器 床常用耳机led灯封嘴贴小酒精 身份证只能出现在里包、小包 钥匙只能出现在大包、小包 平板笔不离开平板周围 "},{"title":"机械行为生活设想与试行","date":"2024-09-11T08:44:37.676Z","url":"/2024/09/11/%E6%9C%BA%E6%A2%B0%E8%A1%8C%E4%B8%BA%E7%94%9F%E6%B4%BB%E8%AE%BE%E6%83%B3%E4%B8%8E%E8%AF%95%E8%A1%8C/","categories":[["undefined",""]],"content":"铁律的必要规则中的自由造神与连接关于存在认识的补充 建立在虚无之上的虚无"},{"title":"C语言实现按任意键退出功能","date":"2024-09-09T01:17:29.844Z","url":"/2024/09/09/c%20tips2/","categories":[["undefined",""]],"content":"在C语言中，实现“按任意键退出”的功能通常需要使用标准输入输出库（stdio.h）中的函数。以下是几种常见的方法： 方法1：使用getchar()getchar()函数从标准输入读取一个字符，但不显示在屏幕上。按任意键后，程序会继续执行并退出。 #include &lt;stdio.h&gt; int main() { printf(“按任意键退出…\\n”); getchar(); &#x2F;&#x2F; 等待用户按下任意键 return 0;}DiffCopyInsert方法2：使用system(“pause”)在Windows系统中，可以使用system(“pause”)命令来实现按任意键退出的功能。这个命令会暂停程序的执行，并显示“按任意键继续…”的提示。 #include &lt;stdio.h&gt;#include &lt;stdlib.h&gt; int main() { printf(“按任意键退出…\\n”); system(“pause”); &#x2F;&#x2F; 等待用户按下任意键 return 0;}DiffCopyInsert方法3：使用_getch()（Windows专用）_getch()函数从控制台读取一个字符，但不显示在屏幕上，也不需要按回车键。这个函数在conio.h头文件中定义，适用于Windows系统。 #include &lt;stdio.h&gt;#include &lt;conio.h&gt; &#x2F;&#x2F; 包含_getch()函数 int main() { printf(“按任意键退出…\\n”); _getch(); &#x2F;&#x2F; 等待用户按下任意键 return 0;}DiffCopyInsert方法4：使用getc(stdin)getc(stdin)函数从标准输入读取一个字符，类似于getchar()，但不显示在屏幕上。 #include &lt;stdio.h&gt; int main() { printf(“按任意键退出…\\n”); getc(stdin); &#x2F;&#x2F; 等待用户按下任意键 return 0;}DiffCopyInsert注意事项跨平台兼容性：system(“pause”)和_getch()是Windows专用的函数，如果在其他操作系统（如Linux或macOS）上运行，可能会导致编译错误或无法正常工作。输入缓冲区：在使用getchar()或getc(stdin)时，如果之前有未处理的输入缓冲区内容，可能会导致程序立即退出。可以通过调用fflush(stdin)来清空输入缓冲区，但fflush(stdin)在某些编译器上可能不被支持。跨平台解决方案为了实现跨平台的“按任意键退出”功能，可以使用条件编译来选择不同的实现方式。 #include &lt;stdio.h&gt; #ifdef _WIN32#include &lt;conio.h&gt;#define PAUSE_KEY() _getch()#else#define PAUSE_KEY() getchar()#endif int main() { printf(“按任意键退出…\\n”); PAUSE_KEY(); &#x2F;&#x2F; 等待用户按下任意键 return 0;}DiffCopyInsert在这个示例中，_WIN32宏用于检测是否为Windows系统，从而选择合适的函数来实现“按任意键退出”的功能。"},{"title":"C语言中多行语句的写法与运算符","date":"2024-09-09T00:52:23.672Z","url":"/2024/09/09/c%20tips1/","categories":[["undefined",""]],"content":"在C语言中，一条语句并不一定只能写在一行上。C语言允许一条语句跨越多行，只要语法正确即可。以下是一些示例： 示例1：多行函数调用printf(“这是一个很长的字符串，” “它可以分成多行来写，” “只要在每行的末尾加上反斜杠（\\）或者不加任何符号。”);DiffCopyInsert示例2：多行条件语句if (condition1 &amp;&amp; condition2 &amp;&amp; condition3) { &#x2F;&#x2F; 执行代码}DiffCopyInsert示例3：多行赋值语句int result &#x3D; (a + b + c + d + e + f);DiffCopyInsert示例4：多行宏定义#define LONG_MACRO(x, y, z) ((x) + (y) + (z))DiffCopyInsert示例5：多行数组初始化int array[] &#x3D; { 1, 2, 3, 4, 5, 6, 7, 8, 9};DiffCopyInsert示例6：多行字符串char *longString &#x3D; “这是一个很长的字符串，” “它可以分成多行来写，” “只要在每行的末尾加上反斜杠（\\）或者不加任何符号。”;DiffCopyInsert注意事项反斜杠（\\）：在行末加上反斜杠可以将多行语句连接成一行。字符串拼接：在字符串中，如果多行字符串之间没有其他字符，编译器会自动将它们拼接成一个完整的字符串。总之，C语言允许一条语句跨越多行，只要语法正确并且符合编码规范即可。 C语言提供了多种运算符，用于执行各种操作。以下是C语言中常见的运算符分类及其具体类型： 算术运算符用于执行基本的数学运算。 +：加法-：减法*：乘法&#x2F;：除法%：取模（取余数）2. 关系运算符用于比较两个值。 &#x3D;&#x3D;：等于!&#x3D;：不等于 ：大于&lt;：小于&#x3D;：大于等于&lt;&#x3D;：小于等于3. 逻辑运算符用于执行逻辑操作。 &amp;&amp;：逻辑与||：逻辑或!：逻辑非4. 位运算符用于对整数进行位级别的操作。 &amp;：按位与|：按位或^：按位异或~：按位取反&lt;&lt;：左移 ：右移5. 赋值运算符用于给变量赋值。 &#x3D;：简单赋值+&#x3D;：加法赋值-&#x3D;：减法赋值*&#x3D;：乘法赋值&#x2F;&#x3D;：除法赋值%&#x3D;：取模赋值&amp;&#x3D;：按位与赋值|&#x3D;：按位或赋值^&#x3D;：按位异或赋值&lt;&lt;&#x3D;：左移赋值 &#x3D;：右移赋值6. 自增和自减运算符用于增加或减少变量的值。 ++：自增（前缀或后缀）–：自减（前缀或后缀）7. 条件运算符（三元运算符）用于根据条件选择不同的值。 ? :：条件运算符8. 逗号运算符用于将多个表达式组合在一起。 ,：逗号运算符9. 成员访问运算符用于访问结构体或联合体的成员。 .：结构体成员访问-&gt;：指针访问结构体成员10. 指针运算符用于操作指针。 *：间接寻址（解引用）&amp;：取地址11. 类型转换运算符用于将一种数据类型转换为另一种数据类型。 (type)：类型转换12. 其他运算符sizeof：获取数据类型或变量的大小[]：数组下标运算符()：函数调用运算符总结C语言提供了丰富的运算符，涵盖了算术、关系、逻辑、位操作、赋值、自增自减、条件、逗号、成员访问、指针、类型转换等多种操作。这些运算符使得C语言能够灵活地处理各种编程任务。"},{"title":"关于c语言的循环与位运算符的一些事","date":"2024-09-06T09:07:48.210Z","url":"/2024/09/06/%E5%85%B3%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/","categories":[["undefined",""]],"content":"Questionc语言位运算符 Answer在C语言中，位运算符用于对整数类型的数据进行位级别的操作。以下是C语言中常用的位运算符及其功能： 按位与（&amp;）： 对两个操作数的每一位执行逻辑与操作。 例如：5 &amp; 3 的结果是 1，因为二进制表示为 0101 &amp; 0011 = 0001。 按位或（|）： 对两个操作数的每一位执行逻辑或操作。 例如：5 | 3 的结果是 7，因为二进制表示为 0101 | 0011 = 0111。 按位异或（^）： 对两个操作数的每一位执行逻辑异或操作。 例如：5 ^ 3 的结果是 6，因为二进制表示为 0101 ^ 0011 = 0110。 按位取反（~）： 对操作数的每一位执行逻辑非操作。 例如：~5 的结果是 -6，因为二进制表示为 ~0101 = 1010（假设是32位整数，结果是 11111111111111111111111111111010，即 -6）。 左移（&lt;&lt;）： 将操作数的所有位向左移动指定的位数，右边补0。 例如：5 &lt;&lt; 1 的结果是 10，因为二进制表示为 0101 &lt;&lt; 1 = 1010。 右移（&gt;&gt;）： 将操作数的所有位向右移动指定的位数，左边补符号位（对于有符号整数）或0（对于无符号整数）。 例如：5 &gt;&gt; 1 的结果是 2，因为二进制表示为 0101 &gt;&gt; 1 = 0010。 这些位运算符在处理位级别的操作时非常有用，例如在嵌入式系统编程、加密算法、图像处理等领域。 Questionc语言中的各种循环类型 Answer在C语言中，有三种基本的循环结构，它们用于执行重复性任务。这三种循环类型分别是： for 循环： 语法格式：for(初始化; 条件; 更新) &#123; 语句块 &#125; for 循环通常用于知道循环执行次数的场合。初始化在循环开始前执行一次，条件在每次循环开始时检查，更新在每次循环结束后执行。 例子： while 循环： 语法格式：while(条件) &#123; 语句块 &#125; while 循环在每次执行前检查条件。如果条件为真，执行语句块。适用于需要在循环中重新检查条件以决定是否继续的场合。 例子： do-while 循环： 语法格式：do &#123; 语句块 &#125; while(条件); do-while 循环首先执行一次语句块，然后检查条件。只要条件为真，继续执行语句块。保证语句块至少被执行一次。 例子： 每种循环结构都有其适用的场景，选择哪种循环结构取决于具体应用要求及逻辑的简洁性。"},{"title":"语言随记","date":"2024-09-06T08:31:04.891Z","url":"/2024/09/06/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0%EF%BC%88%E5%85%B6%E5%AE%9E%E6%AF%9B%E9%83%BD%E6%B2%A1%E6%9C%89%EF%BC%89/","categories":[["undefined",""]],"content":"start date :2024.9.6 模块基础语法变量（左与右）变量类型储存类 auto register static extern 运算符 三元运算符 condition? expression1 : expression2值得注意，必要时可用于简化表达（当然，不需要写屎山代码&#x3D;-&#x3D;）比如下面这个判断奇数与偶数的程序： 位运算符这玩意够呛，得熟练运用二进制还是看看ai怎么说罢 在C语言中，位运算符用于对整数类型的数据进行位级别的操作。以下是C语言中常用的位运算符及其功能： 按位与（&amp;）： 对两个操作数的每一位执行逻辑与操作。例如：5 &amp; 3 的结果是 1，因为二进制表示为 0101 &amp; 0011 &#x3D; 0001。按位或（|）： 对两个操作数的每一位执行逻辑或操作。例如：5 | 3 的结果是 7，因为二进制表示为 0101 | 0011 &#x3D; 0111。按位异或（^）： 对两个操作数的每一位执行逻辑异或操作。例如：5 ^ 3 的结果是 6，因为二进制表示为 0101 ^ 0011 &#x3D; 0110。按位取反（~）： 对操作数的每一位执行逻辑非操作。例如：~5 的结果是 -6，因为二进制表示为 ~0101 &#x3D; 1010（假设是32位整数，结果是11111111111111111111111111111010，即 -6）。左移（&lt;&lt;）： 将操作数的所有位向左移动指定的位数，右边补0。例如：5 &lt;&lt; 1 的结果是 10，因为二进制表示为 0101 &lt;&lt; 1 &#x3D; 1010。右移（&gt;&gt;）： 将操作数的所有位向右移动指定的位数，左边补符号位（对于有符号整数）或0（对于无符号整数）。例如：5 &gt;&gt; 1 的结果是 2，因为二进制表示为 0101 &gt;&gt; 1 &#x3D; 0010。这些位运算符在处理位级别的操作时非常有用，例如在嵌入式系统编程、加密算法、图像处理等领域。 控制语句循环 for 循环 while 循环 do-while 循环 ##常用头文件 stdio.h 标准输入输出头文件 stdlib.h 常用函数库头文件 math.h 数学函数库头文件 to be continued…"},{"title":"c1","date":"2024-08-31T06:46:56.098Z","url":"/2024/08/31/c1/","categories":[["undefined",""]],"content":"在C语言中，printf 函数使用各种格式说明符来输出不同类型的数据。以下是常见的格式说明符： %d 或 **%i**：输出一个十进制整数。 **%u**：输出一个无符号十进制整数。 **%f**：输出一个浮点数。 **%lf**：输出一个双精度浮点数（double 类型）。虽然在大多数实现中，%f 和 %lf 对 double 的行为是一样的，但在 scanf 函数中，%lf 用于 double。 **%c**：输出一个字符。 **%s**：输出一个字符串。 **%x**：输出一个无符号整数的十六进制表示（小写字母）。 **%X**：输出一个无符号整数的十六进制表示（大写字母）。 **%o**：输出一个无符号整数的八进制表示。 **%p**：输出一个指针的值（地址）。 %e 或 **%E**：以科学记数法输出浮点数。 %g 或 **%G**：输出浮点数，选择最简洁的表示方式（普通浮点数或科学记数法）。 **%%**：输出一个百分号字符 (%)。 这些格式说明符允许你在 printf 函数中以不同的方式输出各种数据类型。"},{"title":"toki pona 道本语学习记录","date":"2024-08-26T00:11:30.074Z","url":"/2024/08/26/toki%20pona/","categories":[["undefined",""]]},{"title":"苏菲的世界---从神话到亚里士多德","date":"2024-08-25T23:58:56.929Z","url":"/2024/08/26/D3/","categories":[["undefined",""]],"content":"《苏》作为哲学启蒙书籍，虽然叙述语调低幼了些，但仍是一本哲学入门的好书 神话世界自然派哲学家米雷斯特泰利斯雅典学者派关于“人”的哲学"},{"title":"D2 Test 2","date":"2024-08-25T05:35:42.993Z","url":"/2024/08/25/D2/","categories":[["undefined",""]],"content":"welcomeshut up damn 这是一个脚注的内容[^1][^1]: 这是脚注的内容"},{"title":"D1","date":"2024-08-20T07:09:23.554Z","url":"/2024/08/20/D1/","categories":[["undefined",""]],"content":"D1评论区已开放后续再慢慢整点花活"},{"title":"Hello World","date":"2024-07-07T13:06:30.223Z","url":"/2024/07/07/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]