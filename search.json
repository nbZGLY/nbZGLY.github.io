[{"title":"关于c语言的循环与位运算符的一些事","date":"2024-09-06T09:07:48.210Z","url":"/2024/09/06/%E5%85%B3%E4%BA%8Ec%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/","categories":[["undefined",""]],"content":"Questionc语言位运算符 Answer在C语言中，位运算符用于对整数类型的数据进行位级别的操作。以下是C语言中常用的位运算符及其功能： 按位与（&amp;）： 对两个操作数的每一位执行逻辑与操作。 例如：5 &amp; 3 的结果是 1，因为二进制表示为 0101 &amp; 0011 = 0001。 按位或（|）： 对两个操作数的每一位执行逻辑或操作。 例如：5 | 3 的结果是 7，因为二进制表示为 0101 | 0011 = 0111。 按位异或（^）： 对两个操作数的每一位执行逻辑异或操作。 例如：5 ^ 3 的结果是 6，因为二进制表示为 0101 ^ 0011 = 0110。 按位取反（~）： 对操作数的每一位执行逻辑非操作。 例如：~5 的结果是 -6，因为二进制表示为 ~0101 = 1010（假设是32位整数，结果是 11111111111111111111111111111010，即 -6）。 左移（&lt;&lt;）： 将操作数的所有位向左移动指定的位数，右边补0。 例如：5 &lt;&lt; 1 的结果是 10，因为二进制表示为 0101 &lt;&lt; 1 = 1010。 右移（&gt;&gt;）： 将操作数的所有位向右移动指定的位数，左边补符号位（对于有符号整数）或0（对于无符号整数）。 例如：5 &gt;&gt; 1 的结果是 2，因为二进制表示为 0101 &gt;&gt; 1 = 0010。 这些位运算符在处理位级别的操作时非常有用，例如在嵌入式系统编程、加密算法、图像处理等领域。 Questionc语言中的各种循环类型 Answer在C语言中，有三种基本的循环结构，它们用于执行重复性任务。这三种循环类型分别是： for 循环： 语法格式：for(初始化; 条件; 更新) &#123; 语句块 &#125; for 循环通常用于知道循环执行次数的场合。初始化在循环开始前执行一次，条件在每次循环开始时检查，更新在每次循环结束后执行。 例子： while 循环： 语法格式：while(条件) &#123; 语句块 &#125; while 循环在每次执行前检查条件。如果条件为真，执行语句块。适用于需要在循环中重新检查条件以决定是否继续的场合。 例子： do-while 循环： 语法格式：do &#123; 语句块 &#125; while(条件); do-while 循环首先执行一次语句块，然后检查条件。只要条件为真，继续执行语句块。保证语句块至少被执行一次。 例子： 每种循环结构都有其适用的场景，选择哪种循环结构取决于具体应用要求及逻辑的简洁性。"},{"title":"语言随记","date":"2024-09-06T08:31:04.891Z","url":"/2024/09/06/c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E9%9A%8F%E8%AE%B0%EF%BC%88%E5%85%B6%E5%AE%9E%E6%AF%9B%E9%83%BD%E6%B2%A1%E6%9C%89%EF%BC%89/","categories":[["undefined",""]],"content":"start date :2024.9.6 模块基础语法变量（左与右）变量类型储存类 auto register static extern 运算符 三元运算符 condition? expression1 : expression2值得注意，必要时可用于简化表达（当然，不需要写屎山代码&#x3D;-&#x3D;）比如下面这个判断奇数与偶数的程序： 位运算符这玩意够呛，得熟练运用二进制还是看看ai怎么说罢 在C语言中，位运算符用于对整数类型的数据进行位级别的操作。以下是C语言中常用的位运算符及其功能： 按位与（&amp;）： 对两个操作数的每一位执行逻辑与操作。例如：5 &amp; 3 的结果是 1，因为二进制表示为 0101 &amp; 0011 &#x3D; 0001。按位或（|）： 对两个操作数的每一位执行逻辑或操作。例如：5 | 3 的结果是 7，因为二进制表示为 0101 | 0011 &#x3D; 0111。按位异或（^）： 对两个操作数的每一位执行逻辑异或操作。例如：5 ^ 3 的结果是 6，因为二进制表示为 0101 ^ 0011 &#x3D; 0110。按位取反（~）： 对操作数的每一位执行逻辑非操作。例如：~5 的结果是 -6，因为二进制表示为 ~0101 &#x3D; 1010（假设是32位整数，结果是11111111111111111111111111111010，即 -6）。左移（&lt;&lt;）： 将操作数的所有位向左移动指定的位数，右边补0。例如：5 &lt;&lt; 1 的结果是 10，因为二进制表示为 0101 &lt;&lt; 1 &#x3D; 1010。右移（&gt;&gt;）： 将操作数的所有位向右移动指定的位数，左边补符号位（对于有符号整数）或0（对于无符号整数）。例如：5 &gt;&gt; 1 的结果是 2，因为二进制表示为 0101 &gt;&gt; 1 &#x3D; 0010。这些位运算符在处理位级别的操作时非常有用，例如在嵌入式系统编程、加密算法、图像处理等领域。 控制语句循环 for 循环 while 循环 do-while 循环 to be continued…"},{"title":"c1","date":"2024-08-31T06:46:56.098Z","url":"/2024/08/31/c1/","categories":[["undefined",""]],"content":"在C语言中，printf 函数使用各种格式说明符来输出不同类型的数据。以下是常见的格式说明符： %d 或 **%i**：输出一个十进制整数。 **%u**：输出一个无符号十进制整数。 **%f**：输出一个浮点数。 **%lf**：输出一个双精度浮点数（double 类型）。虽然在大多数实现中，%f 和 %lf 对 double 的行为是一样的，但在 scanf 函数中，%lf 用于 double。 **%c**：输出一个字符。 **%s**：输出一个字符串。 **%x**：输出一个无符号整数的十六进制表示（小写字母）。 **%X**：输出一个无符号整数的十六进制表示（大写字母）。 **%o**：输出一个无符号整数的八进制表示。 **%p**：输出一个指针的值（地址）。 %e 或 **%E**：以科学记数法输出浮点数。 %g 或 **%G**：输出浮点数，选择最简洁的表示方式（普通浮点数或科学记数法）。 **%%**：输出一个百分号字符 (%)。 这些格式说明符允许你在 printf 函数中以不同的方式输出各种数据类型。"},{"title":"toki pona 道本语学习记录","date":"2024-08-26T00:11:30.074Z","url":"/2024/08/26/toki%20pona/","categories":[["undefined",""]]},{"title":"苏菲的世界---从神话到亚里士多德","date":"2024-08-25T23:58:56.929Z","url":"/2024/08/26/D3/","categories":[["undefined",""]],"content":"《苏》作为哲学启蒙书籍，虽然叙述语调低幼了些，但仍是一本哲学入门的好书 神话世界自然派哲学家米雷斯特泰利斯雅典学者派关于“人”的哲学"},{"title":"D2 Test 2","date":"2024-08-25T05:35:42.993Z","url":"/2024/08/25/D2/","categories":[["undefined",""]],"content":"welcomeshut up damn 这是一个脚注的内容[^1][^1]: 这是脚注的内容"},{"title":"D1","date":"2024-08-20T07:09:23.554Z","url":"/2024/08/20/D1/","categories":[["undefined",""]],"content":"D1评论区已开放后续再慢慢整点花活"},{"title":"Hello World","date":"2024-07-07T13:06:30.223Z","url":"/2024/07/07/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]